package drools.spring.rules;
dialect  "mvel"

import ftn.bsep9.model.Log;
import java.util.Date;

import ftn.bsep9.service.AlarmService;

global AlarmService alarmService;

declare fiveOrMoreSameUsernameWarningsEvent
    @role(event)
    @timestamp(occuredAt) // for "meets" on these events/facts
    macAddress: String
    occuredAt: Date
    // $warningCount will (probably?) always be 5, unless 5+ events happen
    // during the 5m brake, which is made by `not..over window:time(5m)`.
    warningCount: int
end

function String getUsername(String text) {
    return text.substring(text.toLowerCase().indexOf("user") + 5).split(" ", 2)[0];
}

rule "5+ same-username warnings in 5 minutes"
    when
        // $log1: Log( $severity: severityType, $trackedMacAddress: MACAddress )
        $log1: Log(severityType.equals("WARNING"), $trackedMacAddress: MACAddress)
        $warningsCount: Number(intValue >= 4) from accumulate(
            $log2: Log(
                this != $log1,
                getUsername(text).equals(getUsername($log1.getText())),
                severityType.equals("WARNING"),
                MACAddress.equals($trackedMacAddress),
                this meets[5m] $log1
            ),
            count($log2)
        )
        // TODO: zapamtiti $severity da mozemo pratiti vise tipova severity-a jednim pravilom! :)
        not(
            fiveOrMoreSameUsernameWarningsEvent(macAddress == $trackedMacAddress)
            over window:time(5m)
        )
    then
        insert(new fiveOrMoreSameUsernameWarningsEvent($trackedMacAddress, new Date(), $warningsCount + 1));
        alarmService.fireAlarm("warning", $trackedMacAddress, "service", "5 warnings in 5 minutes for user " + getUsername($log1.getText()) + " on machine: " + $trackedMacAddress);
end


rule "test for NO multiWarnings over window time"
    when
        not(fiveOrMoreSameUsernameWarningsEvent() over window:time(1m))
    then
        System.out.println("NO MULTI-WARNINGS!");
end