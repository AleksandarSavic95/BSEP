package drools.spring.rules;
dialect  "mvel"

import java.util.List;
import java.util.Date;

import ftn.bsep9.model.Log;
import ftn.bsep9.service.AlarmService;

global AlarmService alarmService;

declare TenLogsEvent
    @role(event)
    @timestamp(date)
    @expires(10m)
    date: Date
end

declare HundredLogsEvent
    @role(event)
    @timestamp(date)
    date: Date
end

/***************/
/**  10 LOGS  **/
rule "10 logs"
when
    $list: List(size == 10) from collect(Log() over window:time(5m))
then
    insert(new TenLogsEvent(new Date()))
    System.out.println("10 logs event!");
end

rule "accumulate ten logs"
when
    Log()
    $logCount: Number(intValue() >= 10) from accumulate ( // >= 10   ??   == 10
        $LOG: Log(),
        count($LOG)
    )
    not ( TenLogsEvent() over window:time(5m) )
then
    // System.out.println("\nLOGS: " + $logCount);
    if ($logCount.intValue() % 10 == 0) {
        insert(new TenLogsEvent(new Date()))
        System.out.println("10 logs event - accumulate - with NOT!");
    }
end


/***************/
/**  100 LOGS  **/
rule "100 logs"
when
    $list: List(size == 10) from collect(TenLogsEvent())
then
    System.out.println("100 logs event!");
    // should we delete TenLogsEvent objects?
//    for(int i = 0; i < $list.size(); i++) {
//      delete($list.get(i));
//    }
    insert(new HundredLogsEvent(new Date()))
end

rule "collect 1000 Logs --> 10 HundredLogsEventS"
when
    $list: List(size == 10) from collect (HundredLogsEvent())
then
    System.out.println("\n1000 THOUSAND LOGS 1000\n");
    alarmService.fireAlarm("success", null, null, " 1000 logs in memory!");
end


//rule "collect 100s of logs"
//when
//    $list: List(size >= 100) from collect(Log())
//then
//    if ($list.size() % 100 == 0) {
//        System.out.println("We've found " + $list.size() + " logs!");
//        alarmService.fireAlarm("success", null, null, $list.size() + " logs in memory!");
//    }
//end
